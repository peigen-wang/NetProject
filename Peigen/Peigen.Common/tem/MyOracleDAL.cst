<%@ CodeTemplate Language="C#" TargetLanguage="C#" ResponseEncoding="UTF-8" Src="CommonOracle.cs" Inherits="Transion.Common" Description="Great DataAccess Class - BLL" %>
<%@ Property Name="SourceTable" Type="SchemaExplorer.TableSchema" Category="Context" Description="Table Name" %>
<%@ Property Name="NameSpace" Type="System.String" Default="Cun.Shop" Category="Text" Description="Namespace" %>
<%@ Property Name="Prefix" Type="System.String" Default="transion" Category="Text" Description="Store Procedure Name Prefix." %>
<%@ Property Name="DBName" Type="System.String" Default="CnLife_Shop" Category="Text" Description="Database Name" %>

<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="System.Data" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="System.Data" %>
<%@ Import Namespace="System.Text" %>
//====================================================================
// Transion Group @Copy Right 2008-2010
// 源文件名: <%= GetClassName(SourceTable) %>.cs
// 创建时间: <%=DateTime.Now.ToShortDateString() %>
// 使用说明: 请勿直接修改此文件，如需扩展请建立 partial class 进行
//====================================================================
using System;
using System.Text;
using System.Data;
using System.Data.Common;
using System.Data.OracleClient;
using System.Collections;
using System.Collections.Generic;
using Transnal.Data;
using <%= NameSpace %>.IDAL;

namespace <%= NameSpace %>.OracleDAL
{
    /// <summary>
    /// Oracle数据访问类 - <%= SourceTable %>
    /// </summary>
    public partial class <%= GetClassName(SourceTable) %> : DALHelper, I<%= GetClassName(SourceTable) %>
    {
		#region 构造函数
		/// <summary>
		/// Default Constructor
		/// </summary>
		public <%= GetClassName(SourceTable) %>()
		{
		}
		#endregion

		#region 实现接口
		
		/// <summary>
        /// 增加一条数据
        /// </summary>
        public int Add(<%= NameSpace %>.Model.<%= GetClassName(SourceTable) %> model)
        {
            StringBuilder sql1 = new StringBuilder("INSERT INTO [<%= GetClassName(SourceTable) %>](");
			StringBuilder sql2 = new StringBuilder(" VALUES(");
			List<DbParameter> parameters = new List<DbParameter>();
			
			<% 
			for (int i = 0; i < GetInsertColumn(SourceTable).Count; i++) { 
				string columnName = GetInsertColumn(SourceTable)[i].Name;
				string strDataType = GetCSharpVariableType(GetInsertColumn(SourceTable)[i]);
			%>
			<%=GetSqlParameterCondition(GetInsertColumn(SourceTable)[i])%>
				<%if(i != 0) {%>
				sql1.Append(",[<%=columnName%>]");	
				<%} else {%>
				sql1.Append("[<%=columnName%>]");	
				<%}%>
				<%if(i != 0) {%>
				sql2.Append(",@p_<%=GetLowerCaseName(columnName)%>");	
				<%} else {%>
				sql2.Append("@p_<%=GetLowerCaseName(columnName)%>");	
				<%}%>
				DbParameter parameter<%=columnName%> = DbHelper.CreateInOraParameter("@p_<%=GetLowerCaseName(columnName)%>",OracleType.<%=GetOraDbType(GetInsertColumn(SourceTable)[i])%><% if ((GetOraDbType(GetInsertColumn(SourceTable)[i]) == "VarChar"))%><%{%>,<%=GetInsertColumn(SourceTable)[i].Size%><%}%>,model.<%=columnName%>);
                parameters.Add(parameter<%=columnName%>);
			<%=GetSqlParameterConditionEnd(GetInsertColumn(SourceTable)[i])%>
			
			<%}%>

			sql2.Append(")");
			sql1.Append(")").Append(sql2.ToString());

		<%if ((SourceTable.PrimaryKey.MemberColumns[0].DataType !=DbType.Int32)||(SourceTable.PrimaryKey.MemberColumns[0].IsForeignKeyMember)) {%>
            return DbHelper.ExecuteNonQuery(CommandType.Text, sql1.ToString(), parameters.ToArray());
	    <%} else {%>
			StringBuilder sql3 = new StringBuilder("begin ");
			sql3.Append(sql1.ToString());
			sql3.Append(";select \"S_<%= GetClassName(SourceTable) %>\".currval into @id from dual; end;");
            DbParameter parameterID = DbHelper.CreateOutDbParameter("@id", DbType.Int32);
            parameters.Add(parameterID);

            if (DbHelper.ExecuteNonQuery(CommandType.Text, sql3.ToString(), parameters.ToArray()) > 0)
            {
                int id = Convert.ToInt32(parameterID.Value);
                return id;
            }
            else
            {
                return 0;
            }
		<%}%>

        }

        /// <summary>
        /// 更新一条数据
        /// </summary>
        public bool Update(<%= NameSpace %>.Model.<%= GetClassName(SourceTable) %> model)
        {
            StringBuilder strSql = new StringBuilder();
            strSql.Append("UPDATE [<%= GetClassName(SourceTable) %>] SET ");
            
            <% for (int i = 0; i < SourceTable.NonPrimaryKeyColumns.Count; i++) { %>strSql.Append("[<%= SourceTable.NonPrimaryKeyColumns[i].Name %>] = @p_<%= GetLowerCaseName(SourceTable.NonPrimaryKeyColumns[i].Name) %><% if (i < SourceTable.NonPrimaryKeyColumns.Count - 1) { %>,");
			<% } %><% else %><%{%>"<%}%><% } %>);
            strSql.Append(" WHERE [<%= SourceTable.PrimaryKey.MemberColumns[0].Name %>] = @p_<%= GetLowerCaseName(SourceTable.PrimaryKey.MemberColumns[0].Name) %>");
            
            DbParameter[] parameters = {
			<% for (int i = 0; i < SourceTable.Columns.Count; i++) { %>
				DbHelper.CreateInOraParameter("@p_<%=GetLowerCaseName(SourceTable.Columns[i].Name) %>",OracleType.<%=GetOraDbType(SourceTable.Columns[i])%><% if ((GetOraDbType(SourceTable.Columns[i]) == "VarChar"))%><%{%>,<%=SourceTable.Columns[i].Size%><%}%>, model.<%=SourceTable.Columns[i].Name %>)<% if (i!=SourceTable.Columns.Count-1)%><%{%>,<%}%>
			<% } %>
			};
            
            return DbHelper.ExecuteNonQuery(CommandType.Text, strSql.ToString(), parameters) > 0;
        }

        /// <summary>
        /// 删除一条数据
        /// </summary>
        public bool Delete(<%= GetCSharpVariableType(SourceTable.PrimaryKey.MemberColumns[0])%> fldID)
        {
            StringBuilder strSql = new StringBuilder();
            strSql.Append("DELETE [<%= GetClassName(SourceTable) %>] ");
            strSql.Append(" WHERE [<%= SourceTable.PrimaryKey.MemberColumns[0].Name %>]=@p_<%= GetLowerCaseName(SourceTable.PrimaryKey.MemberColumns[0].Name) %>");
            DbParameter[] parameters = {
                    DbHelper.CreateInOraParameter("@p_<%= GetLowerCaseName(SourceTable.PrimaryKey.MemberColumns[0].Name) %>", OracleType.<%=GetOraDbType(SourceTable.PrimaryKey.MemberColumns[0])%><% if ((GetOraDbType(SourceTable.PrimaryKey.MemberColumns[0]) == "VarChar"))%><%{%>,<%=SourceTable.PrimaryKey.MemberColumns[0].Size%><%}%>, fldID)};

            return DbHelper.ExecuteNonQuery(CommandType.Text,  strSql.ToString(), parameters) > 0;
        }

        /// <summary>
        /// 得到最大ID
        /// </summary>
        public int GetMaxId()
        {
            object id = DbHelper.ExecuteScalar(CommandType.Text, "SELECT MAX([<%= SourceTable.PrimaryKey.MemberColumns[0].Name %>]) FROM [<%= GetClassName(SourceTable) %>]", null);
            return DbHelper.GetInt(id);
        }

        /// <summary>
        /// 是否存在该记录
        /// </summary>
        public bool Exists(<%= GetCSharpVariableType(SourceTable.PrimaryKey.MemberColumns[0])%> fldID)
        {
            StringBuilder strSql = new StringBuilder();
            strSql.Append("SELECT COUNT(1) FROM [<%= GetClassName(SourceTable) %>]");
            strSql.Append(" WHERE [<%= SourceTable.PrimaryKey.MemberColumns[0].Name %>] = @p_<%= GetLowerCaseName(SourceTable.PrimaryKey.MemberColumns[0].Name) %>");
            DbParameter[] parameters = {
                    DbHelper.CreateInOraParameter("@p_<%= GetLowerCaseName(SourceTable.PrimaryKey.MemberColumns[0].Name) %>", OracleType.<%=GetOraDbType(SourceTable.PrimaryKey.MemberColumns[0])%>, fldID)};

            object count = DbHelper.ExecuteScalar(CommandType.Text, strSql.ToString(), parameters);
            return DbHelper.GetInt(count) > 0;
        }

        /// <summary>
        /// 得到一个对象实体
        /// </summary>
        public <%= NameSpace %>.Model.<%= GetClassName(SourceTable) %> GetModel(<%= GetCSharpVariableType(SourceTable.PrimaryKey.MemberColumns[0])%> fldID)
        {
            StringBuilder strSql = new StringBuilder();
            strSql.Append("SELECT * FROM [<%= GetClassName(SourceTable) %>] ");
            strSql.Append(" WHERE [<%= SourceTable.PrimaryKey.MemberColumns[0].Name %>] = @p_<%= GetLowerCaseName(SourceTable.PrimaryKey.MemberColumns[0].Name) %>");
            DbParameter[] parameters = {
                    DbHelper.CreateInOraParameter("@p_<%= GetLowerCaseName(SourceTable.PrimaryKey.MemberColumns[0].Name) %>", OracleType.<%=GetOraDbType(SourceTable.PrimaryKey.MemberColumns[0])%>, fldID)};

            using (DataTable dt = DbHelper.ExecuteDataTable(CommandType.Text, strSql.ToString(), parameters))
			{
				if (dt.Rows.Count > 0)
				{
					DataRow r = dt.Rows[0];
					return GetModel(r);
				}
				else
				{
					return null;
				}
			}
        }

        /// <summary>
        /// 获取数据集,在单表查询时使用
        /// </summary>
        public DataTable GetDataTable(string strWhat, string strWhere, string strOrderby)
        {
            return GetDataTable(strWhat, strWhere, strOrderby, "[<%= GetClassName(SourceTable) %>]");
        }

        /// <summary>
        /// 获取泛型数据列表,建议只在多表联查时使用
        /// </summary>
        public IList<<%= NameSpace %>.Model.<%= GetClassName(SourceTable) %>> GetList(string strSql)
        {
            using (DataTable dt = GetDataTable(strSql))
            {
                return GetList(dt);
            }
        }

        /// <summary>
        /// 获取泛型数据列表,在单表查询时使用
        /// </summary>
        public IList<<%= NameSpace %>.Model.<%= GetClassName(SourceTable) %>> GetList(string strWhat, string strWhere, string strOrderby)
        {
            using (DataTable dt = GetDataTable(strWhat, strWhere, strOrderby))
            {
                return GetList(dt);
            }
        }

        /// <summary>
        /// 分页获取泛型数据列表
        /// </summary>
        public IList<<%= NameSpace %>.Model.<%= GetClassName(SourceTable) %>> GetList(string fldSort, string condition, int first, int last)
        {
            using(DataTable dt = DbHelper.GetPageList("[<%= GetClassName(SourceTable) %>]", fldSort, condition, first, last))
			{
				return GetList(dt);
			}
        }

        /// <summary>
        /// 得到数据条数
        /// </summary>
        public int GetCount(string condition)
        {
            StringBuilder sql = new StringBuilder("SELECT COUNT(*) FROM [<%= GetClassName(SourceTable) %>]");
            if (!string.IsNullOrEmpty(condition))
                sql.Append(" WHERE " + condition);

            object count = DbHelper.ExecuteScalar(CommandType.Text, sql.ToString(), null);
            return DbHelper.GetInt(count);
        }

		#endregion
			
		#region 私有方法

        /// <summary>
        /// 由一行数据得到一个实体
        /// </summary>
        private <%= NameSpace %>.Model.<%= GetClassName(SourceTable) %> GetModel(DataRow dr)
        {
            <%= NameSpace %>.Model.<%= GetClassName(SourceTable) %> model = new <%= NameSpace %>.Model.<%= GetClassName(SourceTable) %>();
            
			<% for (int i = 0; i < SourceTable.Columns.Count; i++) { %>
				<% string currStr ="dr[\""+SourceTable.Columns[i].Name+"\"]";%>
				model.<%= SourceTable.Columns[i].Name %> = DbHelper.<%= GetReaderMethod(SourceTable.Columns[i])%>(<%=currStr%>);
			<% } %>

            return model;
        }

        /// <summary>
        /// 由数据集得到泛型数据列表
        /// </summary>
        private IList<<%= NameSpace %>.Model.<%= GetClassName(SourceTable) %>> GetList(DataTable dt)
        {
            List<<%= NameSpace %>.Model.<%= GetClassName(SourceTable) %>> lst = new List<<%= NameSpace %>.Model.<%= GetClassName(SourceTable) %>>();
			foreach (DataRow r in dt.Rows)
            {
                lst.Add(GetModel(r));
            }
            return lst;
        }
        
		#endregion

		<%if (SourceTable.PrimaryKey.MemberColumns[0].DataType !=DbType.Int32) {%>
		#region 实现int接口

		/// <summary>
        /// 删除一条数据
        /// </summary>
        public bool Delete(int fieldID)
        {
            return false;
        }

        /// <summary>
        /// 是否存在该记录
        /// </summary>
        public bool Exists(int fieldID)
        {
            return false;
        }

		/// <summary>
        /// 得到一个对象实体
        /// </summary>
        public <%= NameSpace %>.Model.<%= GetClassName(SourceTable) %> GetModel(int fieldID)
        {
            return null;
        }

		#endregion
		<%}%>

    }
}
